{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar kurtosis = require( '@stdlib/stats-base-dists-hypergeometric-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-hypergeometric-mean' );\nvar mode = require( '@stdlib/stats-base-dists-hypergeometric-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-hypergeometric-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-hypergeometric-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-hypergeometric-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-hypergeometric-cdf' );\nvar logpmf = require( '@stdlib/stats-base-dists-hypergeometric-logpmf' );\nvar pmf = require( '@stdlib/stats-base-dists-hypergeometric-pmf' );\nvar quantile = require( '@stdlib/stats-base-dists-hypergeometric-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction hypergeometricCDF( x ) {\n\treturn cdf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricLogPMF( x ) {\n\treturn logpmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricPMF( x ) {\n\treturn pmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*/\nfunction hypergeometricQuantile( p ) {\n\treturn quantile( p, this.N, this.K, this.n );\n}\n\n\n// MAIN //\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @constructor\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `K` must not exceed `N`\n* @throws {RangeError} `n` must not exceed `N`\n* @returns {Hypergeometric} distribution instance\n*\n* @example\n* var hypergeometric = new Hypergeometric( 10, 5, 7 );\n*\n* var y = hypergeometric.cdf( 0.8 );\n* // returns 0.0\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nfunction Hypergeometric( N, K, n ) {\n\tif ( !(this instanceof Hypergeometric) ) {\n\t\treturn new Hypergeometric( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Population size `N` must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Subpopulation size `K` must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Number of draws `n` must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Subpopulation size `K` must be less than or equal to `N`.' );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Number of draws `n` must be less than or equal to `N`.' );\n\t}\n\tdefineProperty( this, 'N', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn N;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( K > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be larger than or equal to `%s`. Value: `%u`.', 'K', value ) );\n\t\t\t}\n\t\t\tif ( n > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be larger than or equal to `%s`. Value: `%u`.', 'n', value ) );\n\t\t\t}\n\t\t\tN = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'K', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn K;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be less than or equal to `%s`. Value: `%u`.', 'N', value ) );\n\t\t\t}\n\t\t\tK = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be less than or equal to `%s`. Value: `%u`.', 'N', value ) );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Hypergeometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.kurtosis;\n* // returns ~-0.276\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution expected value.\n*\n* @name mean\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mean;\n* // returns 3.75\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mean', function get() {\n\treturn mean( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution mode.\n*\n* @name mode\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mode', function get() {\n\treturn mode( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution skewness.\n*\n* @name skewness\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.skewness;\n* // returns ~-0.323\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'skewness', function get() {\n\treturn skewness( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.stdev;\n* // returns ~0.86\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'stdev', function get() {\n\treturn stdev( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution variance.\n*\n* @name variance\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.variance;\n* // returns ~0.74\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'variance', function get() {\n\treturn variance( this.N, this.K, this.n );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.cdf( 0.5 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.logpmf( 2.0 );\n* // returns ~-1.54\n*/\nsetReadOnly( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.pmf( 2.0 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.quantile( 0.8 );\n* // returns 2\n*/\nsetReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Hypergeometric;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @module @stdlib/stats-base-dists-hypergeometric-ctor\n*\n* @example\n* var Hypergeometric = require( '@stdlib/stats-base-dists-hypergeometric-ctor' );\n*\n* var hypergeometric = new Hypergeometric( 40, 10, 8 );\n*\n* var y = hypergeometric.cdf( 2.8 );\n* // returns ~0.688\n*\n* var mode = hypergeometric.mode;\n* // returns 2.0\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["isNonNegativeInteger","require$$0","isPrimitive","defineProperty","require$$1","setReadOnly","require$$2","setReadOnlyAccessor","require$$3","kurtosis","require$$4","mean","require$$5","mode","require$$6","skewness","require$$7","stdev","require$$8","variance","require$$9","cdf","require$$10","logpmf","require$$11","pmf","require$$12","quantile","require$$13","format","require$$14","Hypergeometric","N","K","n","this","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","x","p","lib"],"mappings":"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"}