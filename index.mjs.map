{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport kurtosis from '@stdlib/stats-base-dists-hypergeometric-kurtosis';\nimport mean from '@stdlib/stats-base-dists-hypergeometric-mean';\nimport mode from '@stdlib/stats-base-dists-hypergeometric-mode';\nimport skewness from '@stdlib/stats-base-dists-hypergeometric-skewness';\nimport stdev from '@stdlib/stats-base-dists-hypergeometric-stdev';\nimport variance from '@stdlib/stats-base-dists-hypergeometric-variance';\nimport cdf from '@stdlib/stats-base-dists-hypergeometric-cdf';\nimport logpmf from '@stdlib/stats-base-dists-hypergeometric-logpmf';\nimport pmf from '@stdlib/stats-base-dists-hypergeometric-pmf';\nimport quantile from '@stdlib/stats-base-dists-hypergeometric-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction hypergeometricCDF( x ) {\n\treturn cdf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricLogPMF( x ) {\n\treturn logpmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricPMF( x ) {\n\treturn pmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*/\nfunction hypergeometricQuantile( p ) {\n\treturn quantile( p, this.N, this.K, this.n );\n}\n\n\n// MAIN //\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @constructor\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `K` must not exceed `N`\n* @throws {RangeError} `n` must not exceed `N`\n* @returns {Hypergeometric} distribution instance\n*\n* @example\n* var hypergeometric = new Hypergeometric( 10, 5, 7 );\n*\n* var y = hypergeometric.cdf( 0.8 );\n* // returns 0.0\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nfunction Hypergeometric( N, K, n ) {\n\tif ( !(this instanceof Hypergeometric) ) {\n\t\treturn new Hypergeometric( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Population size must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Subpopulation size must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Number of draws must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Subpopulation size must be less than or equal to the population size.' );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Number of draws must be less than or equal to the population size.' );\n\t}\n\tdefineProperty( this, 'N', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn N;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( K > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be larger than or equal to %u. Value: `%u`.', K, value ) );\n\t\t\t}\n\t\t\tif ( n > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be larger than or equal to %u. Value: `%u`.', n, value ) );\n\t\t\t}\n\t\t\tN = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'K', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn K;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%u`.', N, value ) );\n\t\t\t}\n\t\t\tK = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%u`.', N, value ) );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Hypergeometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.kurtosis;\n* // returns ~-0.276\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution expected value.\n*\n* @name mean\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mean;\n* // returns 3.75\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mean', function get() {\n\treturn mean( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution mode.\n*\n* @name mode\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mode', function get() {\n\treturn mode( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution skewness.\n*\n* @name skewness\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.skewness;\n* // returns ~-0.323\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'skewness', function get() {\n\treturn skewness( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.stdev;\n* // returns ~0.86\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'stdev', function get() {\n\treturn stdev( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution variance.\n*\n* @name variance\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.variance;\n* // returns ~0.74\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'variance', function get() {\n\treturn variance( this.N, this.K, this.n );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.cdf( 0.5 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.logpmf( 2.0 );\n* // returns ~-1.54\n*/\nsetReadOnly( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.pmf( 2.0 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.quantile( 0.8 );\n* // returns 2\n*/\nsetReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );\n\n\n// EXPORTS //\n\nexport default Hypergeometric;\n"],"names":["Hypergeometric","N","K","n","this","isNonNegativeInteger","TypeError","format","RangeError","defineProperty","configurable","enumerable","get","set","value","setReadOnlyAccessor","prototype","kurtosis","mean","mode","skewness","stdev","variance","setReadOnly","x","cdf","logpmf","pmf","p","quantile"],"mappings":"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"}