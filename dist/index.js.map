{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar kurtosis = require( '@stdlib/stats-base-dists-hypergeometric-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-hypergeometric-mean' );\nvar mode = require( '@stdlib/stats-base-dists-hypergeometric-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-hypergeometric-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-hypergeometric-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-hypergeometric-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-hypergeometric-cdf' );\nvar logpmf = require( '@stdlib/stats-base-dists-hypergeometric-logpmf' );\nvar pmf = require( '@stdlib/stats-base-dists-hypergeometric-pmf' );\nvar quantile = require( '@stdlib/stats-base-dists-hypergeometric-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction hypergeometricCDF( x ) {\n\treturn cdf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricLogPMF( x ) {\n\treturn logpmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricPMF( x ) {\n\treturn pmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*/\nfunction hypergeometricQuantile( p ) {\n\treturn quantile( p, this.N, this.K, this.n );\n}\n\n\n// MAIN //\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @constructor\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `K` must not exceed `N`\n* @throws {RangeError} `n` must not exceed `N`\n* @returns {Hypergeometric} distribution instance\n*\n* @example\n* var hypergeometric = new Hypergeometric( 10, 5, 7 );\n*\n* var y = hypergeometric.cdf( 0.8 );\n* // returns 0.0\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nfunction Hypergeometric( N, K, n ) {\n\tif ( !(this instanceof Hypergeometric) ) {\n\t\treturn new Hypergeometric( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Population size must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Subpopulation size must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Number of draws must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Subpopulation size must be less than or equal to the population size.' );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Number of draws must be less than or equal to the population size.' );\n\t}\n\tdefineProperty( this, 'N', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn N;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( K > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be larger than or equal to %u. Value: `%u`.', K, value ) );\n\t\t\t}\n\t\t\tif ( n > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be larger than or equal to %u. Value: `%u`.', n, value ) );\n\t\t\t}\n\t\t\tN = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'K', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn K;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%u`.', N, value ) );\n\t\t\t}\n\t\t\tK = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%u`.', N, value ) );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Hypergeometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.kurtosis;\n* // returns ~-0.276\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution expected value.\n*\n* @name mean\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mean;\n* // returns 3.75\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mean', function get() {\n\treturn mean( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution mode.\n*\n* @name mode\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mode', function get() {\n\treturn mode( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution skewness.\n*\n* @name skewness\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.skewness;\n* // returns ~-0.323\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'skewness', function get() {\n\treturn skewness( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.stdev;\n* // returns ~0.86\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'stdev', function get() {\n\treturn stdev( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution variance.\n*\n* @name variance\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.variance;\n* // returns ~0.74\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'variance', function get() {\n\treturn variance( this.N, this.K, this.n );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.cdf( 0.5 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.logpmf( 2.0 );\n* // returns ~-1.54\n*/\nsetReadOnly( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.pmf( 2.0 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.quantile( 0.8 );\n* // returns 2\n*/\nsetReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Hypergeometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @module @stdlib/stats-base-dists-hypergeometric-ctor\n*\n* @example\n* var Hypergeometric = require( '@stdlib/stats-base-dists-hypergeometric-ctor' );\n*\n* var hypergeometric = new Hypergeometric( 40, 10, 8 );\n*\n* var y = hypergeometric.cdf( 2.8 );\n* // returns ~0.688\n*\n* var mode = hypergeometric.mode;\n* // returns 2.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "kurtosis", "mean", "mode", "skewness", "stdev", "variance", "cdf", "logpmf", "pmf", "quantile", "format", "hypergeometricCDF", "x", "hypergeometricLogPMF", "hypergeometricPMF", "hypergeometricQuantile", "p", "Hypergeometric", "N", "K", "n", "value", "main"]
}
